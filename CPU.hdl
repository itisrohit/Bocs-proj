// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// op
    // (0|1) 11 c1c2c3c4c5c6 d1d2d3 j1j2j3
    // 0110000111101010
    // A instruction
    
    // 0-0-0-0-1-0-1-1-1-0-1-1-1-0-0-1
    Not(in=instruction[15],out=ni);
    Mux16(a=aluOut, b=instruction, sel=ni, out=aluORinstr);

	Or(a=ni,b=instruction[5],out=intoA);

    ARegister(in=aluORinstr, load=intoA, out=Aregister, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=flip);
    Mux16(a=Aregister, b=inM, sel=flip, out=memOrAReg);

    ALU(x=Dregister, y=memOrAReg, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zero, ng=ngt);

    And(a=instruction[15], b=instruction[4], out=isD);
    DRegister(in=aluOut, load=isD, out=Dregister);

    And(a=instruction[15],b=instruction[3],out=writeM);

	Not(in=ngt,out=pos);                                // We use pos to make decicions on other gates
	Not(in=zero,out=nzero);
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzero,out=posnzero);                    // !ngt and !zero
	And(a=jgt,b=posnzero,out=ld1);

	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zero,out=ld2);

	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ngt,out=ld3);

	Or(a=ld1,b=ld2,out=ldt);
	Or(a=ld3,b=ldt,out=ld);

   // DMux(in=isJBit, sel=instruction[13], a=a, b=b);
   // DMux(in=isJBit, sel=instruction[14], a=c, b=d);
   // DMux(in=isJBit, sel=instruction[15], a=e, b=f);

    PC(in=Aregister, load=ld, inc=true, reset=reset, out[0..14]=pc);

}